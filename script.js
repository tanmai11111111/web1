const video = document.getElementById('camera');
const randomButton = document.getElementById('randomButton');
const luckyFaceImg = document.getElementById('luckyFace');
const faceDisplay = document.getElementById('faceDisplay');
const canvas = document.getElementById('overlay');
const ctx = canvas.getContext('2d');
const loadFaceAPI = async () => {
  await faceapi.nets.tinyFaceDetector.loadFromUri('./models');
  await faceapi.nets.faceLandmark68Net.loadFromUri('./models');
  await faceapi.nets.faceRecognitionNet.loadFromUri('./models');
  await faceapi.nets.faceExpressionNet.loadFromUri('./models');
  console.log("‚úÖ ƒê√£ load xong model");
};

function getCameraStream() {
  navigator.mediaDevices.getUserMedia({ video: true, audio: false })
    .then((stream) => {
      video.srcObject = stream;
    })
    .catch((err) => {
      console.error("‚ùå L·ªói camera:", err);
      alert("Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p camera!");
    });
}

video.addEventListener('loadeddata', () => {
  // L·∫•y k√≠ch th∆∞·ªõc video th·ª±c t·∫ø
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;

  const displaySize = {
    width: video.videoWidth,
    height: video.videoHeight
  };
  faceapi.matchDimensions(canvas, displaySize);

  setInterval(async () => {
    const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions());
    const resized = faceapi.resizeResults(detections, displaySize);

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    faceapi.draw.drawDetections(canvas, resized);

    // L∆∞u ƒë·ªÉ d√πng cho random
    window.currentDetections = resized;
  }, 300);
});

// üéØ X·ª≠ l√Ω ch·ªçn khu√¥n m·∫∑t ng·∫´u nhi√™n
randomButton?.addEventListener('click', () => {
  if (window.currentDetections && window.currentDetections.length > 0) {
    const randomIndex = Math.floor(Math.random() * window.currentDetections.length);
    const selectedFace = window.currentDetections[randomIndex];
    const box = selectedFace.box;

    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = box.width;
    tempCanvas.height = box.height;
    const tempCtx = tempCanvas.getContext('2d');

    // C·∫Øt t·ª´ video thay v√¨ canvas
    tempCtx.drawImage(
      video,                // ngu·ªìn video
      box.x, box.y,         // g·ªëc khu√¥n m·∫∑t
      box.width, box.height,// k√≠ch th∆∞·ªõc c·∫ßn c·∫Øt
      0, 0,                 // v·∫Ω t·ª´ (0,0) l√™n tempCanvas
      box.width, box.height
    );

    const imageDataUrl = tempCanvas.toDataURL('image/png');
    luckyFaceImg.src = imageDataUrl;
    faceDisplay.style.display = 'block';

    // V·∫Ω khung ƒë·ªè quanh khu√¥n m·∫∑t ƒë∆∞·ª£c ch·ªçn tr√™n canvas
    const canvas = document.querySelector('canvas');
    const ctx = canvas.getContext('2d');
    ctx.strokeStyle = 'red';
    ctx.lineWidth = 4;
    ctx.strokeRect(box.x, box.y, box.width, box.height);
  } else {
    alert("‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t!");
    faceDisplay.style.display = 'none';
  }
});


// B·∫Øt ƒë·∫ßu
loadFaceAPI().then(getCameraStream);
